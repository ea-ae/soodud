# Common config
services:
  client:
    build:
      context: client/
    volumes:
      - static:/app/dist
  # clustering:
  #   build:
  #     context: clustering/
  #   volumes:
  #     - clustering:/app/out
  django:
    restart: unless-stopped
    build:
      context: ./
      dockerfile: django/Dockerfile
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - main
  db:
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - main
    volumes:
      - data:/var/lib/postgresql/data/
  nginx:
    restart: unless-stopped
    build:
      context: nginx/
    depends_on:
      - client
    env_file:
      - .env
    networks:
      - main
    ports:
      - 80:80
      - 443:443
    volumes:
      - static:/static:ro
      - acmechallenge:/var/www/certbot:ro
      - letsencrypt:/etc/letsencrypt:ro
  certbot:
    image: certbot/certbot
    depends_on:
      - nginx
    volumes:
      - acmechallenge:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    # command: certonly --register-unsafely-without-email --agree-tos --webroot -w /var/www/certbot/ -d soodud.ee
    # command: certonly -d soodud.ee --dry-run
    command: renew

volumes:
  static:
    external: false
  data:
    external: false
  # clustering:
  #   external: false
  acmechallenge:
    external: false
  letsencrypt:
    external: false

networks:
  main:
    driver: bridge
